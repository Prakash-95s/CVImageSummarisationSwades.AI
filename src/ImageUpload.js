import React, { useState,useEffect } from 'react';
import axios from 'axios';
import { Oval } from 'react-loader-spinner';

const ImageUpload = () => {
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [summaries, setSummaries] = useState([]);
  const [loading, setLoading] = useState(false);
  const [estimatedTime, setEstimatedTime] = useState(0);
  const [intervalId, setIntervalId] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFiles(event.target.files);
  };

  const handleUpload = async () => {
    const images = [];

    // Function to convert file to base64
    const fileToBase64 = (file) => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = (error) => reject(error);
      });
    };

    // Convert selected files to base64
    for (let i = 0; i < selectedFiles.length; i++) {
      const base64Image = await fileToBase64(selectedFiles[i]);
      images.push(base64Image);
    }

    console.log("Uploading files...");
    setLoading(true);
    const startTime = Date.now();


    try {  /* Please make sure url of ngrok corresponds to that of one that is generated by ipynb main app */                                                
      const response = await axios.post('https://2304-34-127-78-155.ngrok-free.app/summarize', { images: images }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const endTime = Date.now();
      const timeTaken = (endTime - startTime) / 1000; // in seconds
      const averageTimePerImage = timeTaken / selectedFiles.length;
      setEstimatedTime(Math.round(averageTimePerImage * selectedFiles.length));

      // Check if response data is in expected format
      if (response.data && Array.isArray(response.data.summaries)) {
        setSummaries(response.data.summaries);
      } else {
        console.error("Unexpected response format", response.data);
      }

    } catch (error) {
      if (error.response) {
        console.log('Error response:', error.response.data);
        console.log('Error status:', error.response.status);
        console.log('Error headers:', error.response.headers);
      } else if (error.request) {
        console.log('Error request:', error.request);
      } else {
        console.log('Error message:', error.message);
      }
      console.log('Error config:', error.config);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (loading && estimatedTime > 0) {
      const id = setInterval(() => {
        setEstimatedTime((prev) => Math.max(prev - 1, 0));
      }, 1000);
      setIntervalId(id);

      return () => clearInterval(id);
    }
  }, [loading, estimatedTime]);

  return (
    <div>
      <input type="file" multiple onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload & Summarize</button>
      {loading && (
        <div>
          <Oval
            height={80}
            width={80}
            color="blue"
            wrapperStyle={{}}
            wrapperClass=""
            visible={true}
            ariaLabel="oval-loading"
            secondaryColor="gray"
            strokeWidth={2}
            strokeWidthSecondary={2}
          />
          <p>Estimated time remaining: {estimatedTime} seconds</p>
        </div>
      )}
      <div>
        {summaries.length > 0 ? (
          summaries.map((summary, index) => (
            <div key={index}>
              <h3>Summary {index + 1}</h3>
              <p>{summary}</p>
            </div>
          ))
        ) : (
          <p>No summaries available.</p>
        )}
      </div>
    </div>
  );
};

export default ImageUpload;